document.addEventListener("DOMContentLoaded", function () {
  const openButtons = document.querySelectorAll(".open-modal");
  const closeButtons = document.querySelectorAll(".new-close-modal");

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.add("modal-open");
      modal.style.display = "block";
      modal.style.opacity = "1";
      modal.style.visibility = "visible";
      modal.style.zIndex = "1000"; // –ü–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove("modal-open");
      modal.style.opacity = "0";
      modal.style.visibility = "hidden";
      modal.style.zIndex = "-1";
      setTimeout(() => {
        modal.style.display = "none";
      }, 200);
    }
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  openButtons.forEach(button => {
    button.addEventListener("click", function () {
      const modalId = this.getAttribute("data-modal");
      if (modalId) {
        openModal(modalId);
      }
    });
  });

  closeButtons.forEach(button => {
    button.addEventListener("click", function () {
      const modal = this.closest(".modal");
      if (modal) {
        closeModal(modal.id);
      }
    });
  });

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ñ—É—Ä–Ω–∞–ª"
  const logButton = document.getElementById("openLogButton");
  logButton.addEventListener("click", function () {
    openModal("logModal");
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∂—É—Ä–Ω–∞–ª–∞ –ø–æ —Ç–∏–ø—É
  const logFilters = document.getElementById("logFilters").querySelectorAll("button");
  logFilters.forEach(filterBtn => {
    filterBtn.addEventListener("click", function () {
      const filter = this.dataset.filter;
      const logEntries = document.querySelectorAll("#logList li");
      logEntries.forEach(entry => {
        if (filter === "all" || entry.dataset.type === filter) {
          entry.style.display = "block";
        } else {
          entry.style.display = "none";
        }
      });
    });
  });

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ —Ç–∏–ø—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  function getModalIdByType(type) {
    const modalMap = {
      "NPC": "npcModal",
      "–ö–≤–µ—Å—Ç": "questModal",
      "–õ–æ–∫–∞—Ü–∏—è": "locationModal",
      "–õ—É—Ç": "lootModal",
      "–°–æ–±—ã—Ç–∏–µ": "eventModal",
      "–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ": "encounterModal",
      "–¢–∞–≤–µ—Ä–Ω–∞": "tavernModal"
    };
    return modalMap[type] || null;
  }

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞
  function populateModal(modalId, data) {
    if (modalId === "npcModal") {
      document.getElementById("npcResult").innerHTML = `
        <b>${data.name}</b>, ${data.race}, ${data.gender}, ${data.age} <br>
        <b>–•–∞—Ä–∞–∫—Ç–µ—Ä:</b> ${data.character_description} <br>
        <b>–í–Ω–µ—à–Ω–æ—Å—Ç—å:</b> ${data.appearance} <br>
        <b>–û–¥–µ–∂–¥–∞:</b> ${data.clothing} <br>
        <b>–ü–æ–≤–µ–¥–µ–Ω–∏–µ:</b> ${data.behavior}
      `;
      if (data.quest && data.quest.title) {
        document.getElementById("npcQuestButton").style.display = "inline-block";
        document.getElementById("npcQuestButton").dataset.quest = JSON.stringify(data.quest);
      }
    } else if (modalId === "questModal") {
      document.getElementById("questResult").innerHTML = `
        <b>–ö–≤–µ—Å—Ç:</b> ${data.title} <br>
        <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${data.description} <br>
      `;
      document.getElementById("questActionsStandalone").style.display = "block";
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
  function addToLog(type, data) {
    const logList = document.getElementById("logList");
    let logEntry = document.createElement("li");
    logEntry.textContent = `[${type}] ${data.name || data.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`;
    logEntry.dataset.type = type; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    logEntry.style.cursor = "pointer";
    logEntry.addEventListener("click", function () {
      const modalId = getModalIdByType(type);
      if (modalId) {
        openModal(modalId);
        populateModal(modalId, data);
      }
    });
    logList.appendChild(logEntry);
  }

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NPC
  window.generateNPC = function () {
    const reputation = document.getElementById("npcReputation").value;
    fetch(`php/generate_npc.php?reputation=${reputation}`)
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          document.getElementById("npcResult").innerHTML = `<b>–û—à–∏–±–∫–∞:</b> ${data.error}`;
          document.getElementById("npcQuestButton").style.display = "none";
        } else {
          document.getElementById("npcResult").innerHTML = `
            <b>${data.name}</b>, ${data.race}, ${data.gender}, ${data.age} <br>
            <b>–•–∞—Ä–∞–∫—Ç–µ—Ä:</b> ${data.character_description} <br>
            <b>–í–Ω–µ—à–Ω–æ—Å—Ç—å:</b> ${data.appearance} <br>
            <b>–û–¥–µ–∂–¥–∞:</b> ${data.clothing} <br>
            <b>–ü–æ–≤–µ–¥–µ–Ω–∏–µ:</b> ${data.behavior}
          `;
          let npcQuestButton = document.getElementById("npcQuestButton");
          if (data.quest && data.quest.title) {
            npcQuestButton.style.display = "inline-block";
            npcQuestButton.dataset.quest = JSON.stringify(data.quest);
            // –ö–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è" –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–£–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–≤–µ—Å—Ç"
          } else {
            npcQuestButton.style.display = "none";
            document.getElementById("questActions").style.display = "none";
          }
          addToLog("NPC", data);
        }
      })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
        document.getElementById("npcResult").innerHTML = `<b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å NPC`;
      });
  };

  // –§—É–Ω–∫—Ü–∏—è "–£–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–≤–µ—Å—Ç" –¥–ª—è NPC
  window.getNPCQuest = function () {
    const npcQuestButton = document.getElementById("npcQuestButton");
    let questData = npcQuestButton.dataset.quest;
    if (!questData || questData === "undefined") {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      document.getElementById("npcQuestResult").innerHTML = `<b>–û—à–∏–±–∫–∞:</b> –ö–≤–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`;
      document.getElementById("questActions").style.display = "none";
      return;
    }
    let quest = JSON.parse(questData);
    document.getElementById("npcQuestResult").innerHTML = `
      <b>–ö–≤–µ—Å—Ç:</b> ${quest.title} <br>
      <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${quest.description} <br>
    `;
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"
    document.getElementById("questActions").style.display = "block";
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –∫–≤–µ—Å—Ç–∞ (–∏–∑ NPC)
  window.acceptQuest = function () {
    const npcResult = document.getElementById("npcResult");
    const npcQuestResult = document.getElementById("npcQuestResult");
    if (!npcResult || !npcQuestResult) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–µ!");
      return;
    }
    let npcNameMatch = npcResult.innerHTML.match(/<b>(.*?)<\/b>/);
    let questTitleMatch = npcQuestResult.innerHTML.match(/<b>–ö–≤–µ—Å—Ç:<\/b> (.*?) <br>/);
    let questDescriptionMatch = npcQuestResult.innerHTML.match(/<b>–û–ø–∏—Å–∞–Ω–∏–µ:<\/b> (.*?) <br>/);
    if (!npcNameMatch || !questTitleMatch || !questDescriptionMatch) return;
    let npcName = npcNameMatch[1];
    let questTitle = questTitleMatch[1];
    let questDescription = questDescriptionMatch[1];
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç –≤ –¥–Ω–µ–≤–Ω–∏–∫ –∫–≤–µ—Å—Ç–æ–≤
    addQuestToJournal(`
      <b>üìù ${questTitle}</b><br>
      <i>–û—Ç: ${npcName}</i><br>
      ${questDescription} <br>
    `);
    closeModal("npcModal");
    npcResult.innerHTML = "";
    npcQuestResult.innerHTML = "";
    document.getElementById("questActions").style.display = "none";
    document.getElementById("npcQuestButton").style.display = "none";
    addToLog("–ö–≤–µ—Å—Ç", { title: questTitle, description: questDescription });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è" (–∏–∑ NPC)
  function declineQuest() {
    document.getElementById("npcQuestResult").innerHTML = "";
    document.getElementById("questActions").style.display = "none";
    document.getElementById("npcQuestButton").dataset.quest = "";
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫ (Quest Journal)
  function addQuestToJournal(questHTML) {
    let activeQuestsContainer = document.getElementById("activeQuests");
    let completedQuestsContainer = document.getElementById("completedQuests");
    if (!activeQuestsContainer || !completedQuestsContainer) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
      return;
    }
    let questEntry = document.createElement("li");
    questEntry.classList.add("journal-entry");
    questEntry.innerHTML = questHTML;
    let completeButton = document.createElement("button");
    completeButton.innerText = "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å";
    completeButton.classList.add("complete-button");
    completeButton.onclick = function () {
      completeQuest(this);
    };
    questEntry.appendChild(completeButton);
    activeQuestsContainer.appendChild(questEntry);
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ)
  function completeQuest(button) {
    const questItem = button.parentElement;
    button.remove(); // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
    document.getElementById("completedQuests").appendChild(questItem);
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –∫–≤–µ—Å—Ç–∞ –∏–∑ –æ–∫–Ω–∞ –∫–≤–µ—Å—Ç–∞ (standalone)
  window.acceptQuestStandalone = function () {
    const questResult = document.getElementById("questResult");
    if (!questResult || questResult.innerHTML.trim() === "") {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ö–≤–µ—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!");
      return;
    }
    let questTitleMatch = questResult.innerHTML.match(/<b>–ö–≤–µ—Å—Ç:<\/b> (.*?) <br>/);
    let questDescriptionMatch = questResult.innerHTML.match(/<b>–û–ø–∏—Å–∞–Ω–∏–µ:<\/b> (.*?) <br>/);
    if (!questTitleMatch || !questDescriptionMatch) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –∫–≤–µ—Å—Ç–∞.");
      return;
    }
    let questTitle = questTitleMatch[1];
    let questDescription = questDescriptionMatch[1];
    addQuestToJournal(`
      <b>üìù ${questTitle}</b><br>
      ${questDescription} <br>
    `);
    closeModal("questModal");
    questResult.innerHTML = "";
    document.getElementById("questActionsStandalone").style.display = "none";
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è" –≤ –æ–∫–Ω–µ –∫–≤–µ—Å—Ç–∞
  function declineQuestStandalone() {
    document.getElementById("questResult").innerHTML = "";
    document.getElementById("questActionsStandalone").style.display = "none";
  }

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞
  window.generateQuest = function () {
    const difficulty = document.getElementById("questDifficulty").value;
    fetch(`php/generate_quest.php?difficulty=${difficulty}`)
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          document.getElementById("questResult").innerHTML = `<b>–û—à–∏–±–∫–∞:</b> ${data.error}`;
          document.getElementById("questActionsStandalone").style.display = "none";
        } else {
          document.getElementById("questResult").innerHTML = `
            <b>–ö–≤–µ—Å—Ç:</b> ${data.title} <br>
            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${data.description} <br>
          `;
          document.getElementById("questActionsStandalone").style.display = "block";
          addToLog("–ö–≤–µ—Å—Ç", data);
        }
      })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
        document.getElementById("questResult").innerHTML = `<b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç`;
      });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –∫–≤–µ—Å—Ç–æ–≤ (Quest Journal)
  window.openQuestJournal = function () {
    openModal("questJournalModal");
  };

  // –≠–∫—Å–ø–æ—Ä—Ç decline —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
  window.declineQuest = declineQuest;
  window.declineQuestStandalone = declineQuestStandalone;

});
const apiKey = "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"; // –¢–≤–æ–π OpenAI API-–∫–ª—é—á

const npc = {
    name: "–¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫ –¢–æ–º",
    personality: "–≥—Ä—É–±—ã–π, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –∂–∞–¥–Ω—ã–π",
    trust: 50 // –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è NPC
};

document.getElementById("askNpc").addEventListener("click", function() {
    document.getElementById("dialogWindow").style.display = "block";
});

document.getElementById("sendMessage").addEventListener("click", async function() {
    const playerMessage = document.getElementById("playerInput").value;
    let npcTrust = npc.trust;

 // üìâ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ö–∞–º–∏—Ç - NPC –∑–ª–∏—Ç—Å—è
    if (playerMessage.toLowerCase().includes("–¥—É—Ä–∞–∫") || playerMessage.toLowerCase().includes("–∏–¥–∏–æ—Ç")) {
        npcTrust -= 10;
    } else if (playerMessage.toLowerCase().includes("—Å–ø–∞—Å–∏–±–æ") || playerMessage.toLowerCase().includes("–ø–æ–º–æ–≥—É")) {
        npcTrust += 5;
    }

    npc.trust = Math.max(0, Math.min(100, npcTrust)); // –ù–µ –¥–∞–µ–º —É–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0-100

    const messages = `
    –¢—ã ${npc.name}. –¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: ${npc.personality}. 
    –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –∫ –∏–≥—Ä–æ–∫—É: ${npc.trust}. 
    –ò–≥—Ä–æ–∫ –≥–æ–≤–æ—Ä–∏—Ç: "${playerMessage}". –ö–∞–∫ —Ç—ã –æ—Ç–≤–µ—Ç–∏—à—å?
    `;

const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
    },
    body: JSON.stringify({
        model: "gpt-4", // –ò–ª–∏ "gpt-3.5-turbo"
        messages: [{ role: "system", content: messages }],
        max_tokens: 100
    })
});


const data = await response.json();
if (data && data.choices && data.choices[0]) {
    const npcResponse = data.choices[0].message.content;
    document.getElementById("npcDialog").innerHTML += `<p><b>${npc.name}:</b> ${npcResponse}</p>`;
} else {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–æ–ª—É—á–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API", data);
}
});
